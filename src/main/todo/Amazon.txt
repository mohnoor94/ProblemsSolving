Question 1: Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals,
and return an array of the non-overlapping intervals that cover all the intervals in the input.

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].

[[1,2], [2,3], [3,5]] --> [[1,3], [3,5]] --> [[1,5]]
[1,3], [2, 10] --> [1, 10]
[1, 10], [2, 5] --> [1, 10]
Constraints:

1 <= intervals.length <= 10 power 4
intervals[i].length == 2
0 <= starti <= endi <= 10 power 4


def are_overlaping(first, second): # [1,3], [2, 6]  -- > True
    return first[1] >= second[0]


def merge(intervals, left, right): # (..., 0, 1) [1,3], [2, 6]
    start = intervals[left][0] # 1
    end = intervals[left][1] if intervals[left][1] > intervals[right][1] else intervals[right][1] # 6
    combined = [start, end] # [1, 6]
    del intervals[left] # [[2,6],[8,10],[15,18]]
    del intervals[right] # [[8,10],[15,18]]
    intervals.insert(left, combined) # [[1,6], [8,10],[15,18]]


def merge_intervals(intervals):
    length = len(intervals)
    # sort n log n
    for idx in range(length):
        if idx + 1 < length and are_overlaping(interval[idx], intervals[idx + 1]): # [1,3], [2, 6] '\' [1,6], [8,10]
            merge(intervals, idx, idx + 1)
        else:
            idx += 1



Question 2:
There are N products, and we don't know exactly how many categories there are and which product belongs to which category. We are, however, aware that certain pairs of products belong in the same category.

So, we are given a list of such product ID pairs that identify products belonging to a same category, for example: (1, 5), (7, 2), (3, 4), (4, 8), (6, 3), (5, 2)

When we analyze that list, we can see that we only have two categories with 4 products, each: (1, 2, 5, 7), (3, 4, 6, 8)

The questions are:
* How many categories we have?
* How many products in each category?
* In how many ways can we choose a pair of products so that the two products come from different categories?

* Find:To find the subset a particular element 'k' belongs to. It is generally used to check if two elements belong to the same subset or not.
* Union:It is used to combine two subsets into one. A union query, say Union(x, y) combines the set containing element x and set containing element y.

Input: ((1,2), (2,5), (3,4), (4,6), (6,8), (5,7), (5,2), (5,2)) - Union-Find algorithm.
Output: ((1,2,5,7), (3,4,6,8))

1                  3
/ | \              / | \
    7   2  5            8  4 6
Group 1             Group 2

1 -> 5 -> 2 -> 7
6 -> 3 -> 4 -> 8


def find_categories(input): # O(n2)
    categories = set()

    for pair in input:
        for category in categories:
            if pair[0] in category or pair[1] in category:
                category.add(pair[0])
                catrgory.add(pair[1])
            categories.add(set(pair[0], pair[1]))

    # merge sets





-------------------------------------------------------------------------------------------------------------

// Question: Write a function to convert an array to a BST of minimum height.
//Write a function to convert a BST to a sorted array.

/**
* array : [1,3,5,4,2] --> [1,2,3,4,5]
*
```
4
/ \
    2   5
/ \
    1   3


5
4
3
2
1

```
*

def convert_to_bst(numbers):
    numbers.sort()  # in-place
    return convert_to_bst_helper(numbers, 0, len(numbers) - 1) # [1,2,3,4,5], 0, 4

def convert_to_bst_helper(numbers, start, end): #  [1,2,3,4,5], 0, 4 | 0 , 1
    if start >= end:
        return None
    mid_idx, mid = get_mid(numbers, start, end) # 2, 3 | 0 , 1
    return new Node(mid, convert_to_bst_helper(numbers, start, mid_idx -1), convert_to_bst_helper(numbers, mid_idx + 1, end))
    # Node(3, convert_to_bst_helper([1,2,3,4,5], 0, 1), convert_to_bstd_helper([1,2,3,4,5], 3, 4))
    # Node(3, Node(1, convert(..., 0, -1), convert(..., 1, 1), Node(3, convert(..., 3, 2), convert(..., 4, 4))
    # Node(3, Node(1, convert(..., 0, -1), convert(..., 1, 1), Node(3, convert(..., 3, 2), convert(..., 4, 4))
    # Node(3, Node(1, None, None, Node(3, None, None)

def get_mid(numbers, start, end): #  [1,2,3,4,5], 0, 4 => 2, 3 | 0 , 1 => 0, 1
    mid_idx = (start + end) // 2  # int
    return (mid_idx, numbers[mid_idx])


### Q2
/**
4
/ \
    2   5
/ \
    1   3
*/
def sort_array(node): # root 4,
    if not node:
        return []
    result = []
    insert(node, result) # 4, []
    return result

def insert(node, result): # 4, [] | 2, [] | 1, [] | 3, [1,2] |  5, [1, 2, 3, 4]
    if node.has_left():
        insert(node.left, result) # 2, [] | 1, [] |

    result.append(node.data) # r = [1], [1, 2],  [1, 2, 3], [1, 2, 3, 4],  [1, 2, 3, 4, 5],

    if node.has_right(): # 3, [1,2] | 5, [1, 2, 3, 4]
        insert(node.right, result)
